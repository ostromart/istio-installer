# this config is created through command
# mixgen adapter -n listbackend-nosession -c $GOPATH/src/istio.io/istio/mixer/adapter/list/config/config.proto_descriptor -s=false -t listentry -o nosession.yaml
apiVersion: "config.istio.io/v1alpha2"
kind: adapter
metadata:
  name: listbackend-nosession
  namespace: istio-system
spec:
  description: 
  session_based: false
  templates:
  - listentry
  config: 
---
